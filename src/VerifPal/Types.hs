
-- Based on: https://verifpal.com/res/pdf/manual.pdf

module VerifPal.Types where

import Data.Set (Set)
import Data.List.NonEmpty (NonEmpty)
import Data.Map (Map)
import qualified Data.Map as Map
import Data.Text (Text)

data Principal = Principal
  { principalName :: Text
  , principalKnows :: Map Constant Knowledge
  }
  deriving (Eq, Ord, Show)

emptyPrincipal :: Principal
emptyPrincipal = Principal "empty" Map.empty

-- Fundamental types: Constants, primitives, equations

-- Constants:
--  * Immutable, global namespace, can't be assigned to one another.
--  * Constants can only be assigned to primitives or equations.
--
newtype Constant = Constant
  { constantName :: Text
  } deriving (Eq, Ord, Show)

data Knowledge
  = Private   -- ^ Known ahead by principal only
  | Public    -- ^ Known ahead by everyone
  | Generates -- ^ Generated by principal ("ephemeral")
  | Password  -- ^ ?
  | Leaks     -- ^ ?
  | Assignment Expr
  deriving (Eq, Ord, Show)

-- Primitives:
--  * Decompose: Given ENC(k, m) and k, reveal m.
--  * Recompose: Given a, b, reveal x if a, b, _ = SHAMIR_SPLIT(x)
--  * Rewrite: Given DEC(k, ENC(k, m)), rewrite this to m.
--  * Rebuild: Given SHAMIR_JOIN(a, b) where a, b, c = SHAMIR_SPLIT(x),
--             rewrite SHAMIR_JOIN(a, b) to x.

data Expr
    -- Core primitives
  = ASSERT Expr Expr    -- ASSERT(a, b): unused
  | CONCAT Expr Expr Expr  -- CONCAT(a, b): c
  | SPLIT Expr Expr Expr   -- SPLIT(...CONCAT(a, b)...): a, b

    -- Hashing primitives
  | HASH (NonEmpty Expr) Expr      -- HASH(a, ..., e): x
  | MAC Expr Expr Expr                -- MAC(key, message): hash
  | HKDF Expr Expr Expr (NonEmpty Expr)  -- HKDF(salt, ikm, info): a, ..., e
  | PW_HASH (NonEmpty Expr) Expr   -- PW_HASH(a, ..., e): x

    -- Encryption primitives
  | ENC Expr Expr Expr       -- ENC(key, plaintext): ciphertext
  | DEC Expr Expr Expr       -- DEC(key, ENC(key, plaintext)): plaintext
  | AEAD_ENC Expr Expr Expr  -- AEAD_ENC(key, plaintext, ad): ciphertext
  | AEAD_DEC Expr Expr Expr  -- AEAD_DEC(key, AEAD_ENC(key, plaintext, ad), ad): plaintext
  | PKE_ENC Expr Expr Expr   -- PKE_ENC(G^key, plaintext): ciphertext
  | PKE_DEC Expr Expr Expr   -- PKE_DEC(key, PKE_ENC(G^key, plaintext)): plaintext

    -- Signature primitives
  | SIGN Expr Expr Expr          -- SIGN(key, message): signature
  | SIGNVERIF Expr Expr Expr Expr   -- SIGNVERIF(G^key, message, SIGN(key, message)): message
  | RINGSIGN Expr Expr Expr Expr Expr  -- RINGSIGN(key_a, G^key_b, G^key_c, message): signature
  | RINGSIGNVERIF Expr Expr Expr Expr Expr Expr  -- RINGSIGNVERIF(G^a, G^b, G^c, m, RINGSIGN(a, G^b, G^c, m)): m
  | BLIND Expr Expr Expr         -- BLIND(k, m): m
  | UNBLIND Expr Expr Expr Expr     -- UNBLIND(k, m, SIGN(a, BLIND(k, m))): SIGN(a, m)

    -- Secret sharing primitives
  | SHAMIR_SPLIT Expr Expr Expr Expr  -- SHAMIR_SPLIT(k): s1, s2, s3
  | SHAMIR_JOIN  Expr Expr Expr    -- SHAMIR_JOIN(sa, sb): k

    -- Equations
  | G Expr               -- G^...
  | (:^:) Constant Expr  -- a^b
  | Const Constant       -- a
  deriving (Eq, Ord, Show)

mkConst :: Text -> Expr
mkConst = Const . Constant
